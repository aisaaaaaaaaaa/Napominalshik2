# main.py
import os
import re
import logging
import sqlite3
from datetime import datetime, timedelta
from zoneinfo import ZoneInfo
from typing import Optional, Tuple

import dateparser
from dateparser.search import search_dates
from telegram import Update
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    filters,
)

# ========== –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ==========
LOG_LEVEL = logging.INFO
TIMEZONE_NAME = "Asia/Almaty"
TIMEZONE = ZoneInfo(TIMEZONE_NAME)

BOT_TOKEN = os.getenv("BOT_TOKEN", "YOUR_BOT_TOKEN")
WEBHOOK_URL = os.getenv("WEBHOOK_URL", "https://napominalshik2.onrender.com/webhook")
PORT = int(os.getenv("PORT", 10000))

DB_FILE = "reminders.db"

# ========== –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ==========
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=LOG_LEVEL
)
logger = logging.getLogger(__name__)

# ========== –ë–î ==========
def init_db():
    conn = sqlite3.connect(DB_FILE)
    cur = conn.cursor()
    cur.execute("""
    CREATE TABLE IF NOT EXISTS reminders (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        user_id INTEGER,
        chat_id INTEGER,
        text TEXT,
        remind_time_iso TEXT,  -- stored as UTC ISO string
        sent INTEGER DEFAULT 0,
        created_at TEXT
    )
    """)
    conn.commit()
    conn.close()

def add_reminder_db(user_id: int, chat_id: int, text: str, remind_time_iso_utc: str):
    conn = sqlite3.connect(DB_FILE)
    cur = conn.cursor()
    cur.execute(
        "INSERT INTO reminders (user_id, chat_id, text, remind_time_iso, created_at) VALUES (?, ?, ?, ?, ?)",
        (user_id, chat_id, text, remind_time_iso_utc, datetime.utcnow().isoformat())
    )
    conn.commit()
    rid = cur.lastrowid
    conn.close()
    return rid

def get_due_reminders_db(now_iso_utc: str):
    conn = sqlite3.connect(DB_FILE)
    cur = conn.cursor()
    cur.execute("SELECT id, chat_id, text, remind_time_iso FROM reminders WHERE sent=0 AND remind_time_iso<=? ORDER BY remind_time_iso ASC", (now_iso_utc,))
    rows = cur.fetchall()
    conn.close()
    return rows

def mark_sent_db(rid: int):
    conn = sqlite3.connect(DB_FILE)
    cur = conn.cursor()
    cur.execute("UPDATE reminders SET sent=1 WHERE id=?", (rid,))
    conn.commit()
    conn.close()

def list_reminders_db(chat_id: int):
    conn = sqlite3.connect(DB_FILE)
    cur = conn.cursor()
    cur.execute("SELECT id, text, remind_time_iso FROM reminders WHERE chat_id=? AND sent=0 ORDER BY remind_time_iso", (chat_id,))
    rows = cur.fetchall()
    conn.close()
    return rows

def cancel_reminder_db(chat_id: int, rid: int) -> bool:
    conn = sqlite3.connect(DB_FILE)
    cur = conn.cursor()
    cur.execute("SELECT id FROM reminders WHERE id=? AND chat_id=? AND sent=0", (rid, chat_id))
    found = cur.fetchone()
    if not found:
        conn.close()
        return False
    cur.execute("UPDATE reminders SET sent=1 WHERE id=?", (rid,))
    conn.commit()
    conn.close()
    return True

# ========== –ü–∞—Ä—Å–µ—Ä –¥–∞—Ç—ã/–≤—Ä–µ–º–µ–Ω–∏ ==========
def parse_datetime_from_text(text: str) -> Tuple[Optional[str], Optional[datetime]]:
    """
    –ü–æ–ø—ã—Ç–∫–∞ –Ω–∞–π—Ç–∏ —Ñ—Ä–∞–∑—É –≤—Ä–µ–º–µ–Ω–∏ –≤ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–º —Ç–µ–∫—Å—Ç–µ.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (matched_text, datetime) –∏–ª–∏ (None, None).
    Datetime –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è —Å tzinfo (Asia/Almaty) –∏ –∑–∞—Ç–µ–º –º—ã –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ UTC –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏.
    """
    settings = {
        "PREFER_DATES_FROM": "future",
        "TIMEZONE": TIMEZONE_NAME,
        "RETURN_AS_TIMEZONE_AWARE": True,
    }

    # –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –Ω–∞–π—Ç–∏ –¥–∞—Ç—ã/–≤—Ä–µ–º–µ–Ω–∞ –≤ —Ç–µ–∫—Å—Ç–µ
    try:
        found = search_dates(text, languages=["ru"], settings=settings)
    except Exception as e:
        logger.debug("search_dates failed: %s", e)
        found = None

    if found:
        # –≤—ã–±–∏—Ä–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –Ω–∞–π–¥–µ–Ω–Ω—ã–π —Ñ—Ä–∞–≥–º–µ–Ω—Ç (—á–∞—Å—Ç–æ —ç—Ç–æ –Ω–∞–∏–±–æ–ª–µ–µ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–π)
        match_text, dt = found[-1]
        if dt is not None:
            # –ï—Å–ª–∏ dt –Ω–µ aware ‚Äî —Å—á–∏—Ç–∞–µ–º, —á—Ç–æ —ç—Ç–æ TIMEZONE
            if dt.tzinfo is None:
                dt = dt.replace(tzinfo=TIMEZONE)
            return match_text, dt
    # fallback: –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –∫–æ—Ä–æ—Ç–∫–æ–π —Ñ–æ—Ä–º—ã "—á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç" –∏–ª–∏ "5 –º–∏–Ω—É—Ç" –≤ –Ω–∞—á–∞–ª–µ
    m = re.match(r'^\s*(?:—á–µ—Ä–µ–∑\s+)?(\d{1,5})\s*(–º–∏–Ω—É—Ç|–º–∏–Ω|–º|—á–∞—Å|—á|h|hours)?\b', text, flags=re.I)
    if m:
        num = int(m.group(1))
        unit = (m.group(2) or "").lower()
        if "—á–∞—Å" in unit or unit in ("h","—á","hours"):
            dt = datetime.now(TIMEZONE) + timedelta(hours=num)
        else:
            dt = datetime.now(TIMEZONE) + timedelta(minutes=num)
        return m.group(0).strip(), dt.replace(tzinfo=TIMEZONE)
    return None, None

# ========== –•—ç–Ω–¥–ª–µ—Ä—ã ==========
async def start_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç-–Ω–∞–ø–æ–º–∏–Ω–∞–ª–∫–∞.\n\n"
        "–ü—Ä–∏–º–µ—Ä—ã –∫–æ–º–∞–Ω–¥/—Ç–µ–∫—Å—Ç–∞:\n"
        "- –ù–∞–ø–æ–º–Ω–∏ –∑–∞–≤—Ç—Ä–∞ –≤ 10:00 —Å—Ö–æ–¥–∏—Ç—å –≤ –º–∞–≥–∞–∑–∏–Ω\n"
        "- –ß–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —á–∞–π–Ω–∏–∫\n"
        "- /new 2025-10-07 10:00 –∫—É–ø–∏—Ç—å —Ö–ª–µ–±\n\n"
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "/new <–≤—Ä–µ–º—è> <—Ç–µ–∫—Å—Ç> ‚Äî –Ω–æ–≤—ã–π –Ω–∞–ø–æ–º–∏–Ω–∞–ª–∫–∞\n"
        "/list ‚Äî —Å–ø–∏—Å–æ–∫ –±–ª–∏–∂–∞–π—à–∏—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π\n"
        "/cancel <id> ‚Äî –æ—Ç–º–µ–Ω–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ id"
    )

async def new_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –ø–æ–¥–¥–µ—Ä–∂–∏–º —Å—Ä–∞–∑—É —Ñ–æ—Ä–º–∞—Ç "/new <—Ç–µ–∫—Å—Ç>" ‚Äî –¥–∞–ª—å—à–µ –ª–æ–≥–∏–∫–∞ –≤ –æ–±—â–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ
    text = update.message.text or ""
    payload = text[len("/new"):].strip()
    if not payload:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /new <–≤—Ä–µ–º—è> <—Ç–µ–∫—Å—Ç>\n–ü—Ä–∏–º–µ—Ä: /new –∑–∞–≤—Ç—Ä–∞ –≤ 10:00 –∫—É–ø–∏—Ç—å —Ö–ª–µ–±")
        return
    # –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –∫ –æ–±—â–µ–º—É –æ–±—Ä–∞–±–æ—Ç—á–∏–∫—É (—Ç–æ—Ç –∂–µ –ø–∞—Ä—Å–∏–Ω–≥)
    await handle_message_inner(update, context, payload)

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text or ""
    await handle_message_inner(update, context, text)

async def handle_message_inner(update: Update, context: ContextTypes.DEFAULT_TYPE, text: str):
    user_id = update.effective_user.id
    chat_id = update.effective_chat.id
    original = text.strip()

    # –ü–æ–ø—ã—Ç–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞
    match_text, dt = parse_datetime_from_text(original)
    if not dt:
        await update.message.reply_text(
            "‚è∞ –ù–µ –ø–æ–Ω—è–ª –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è.\n–ü–æ–ø—Ä–æ–±—É–π:\n"
            "- '–ù–∞–ø–æ–º–Ω–∏ –∑–∞–≤—Ç—Ä–∞ –≤ 10:00 —Å—Ö–æ–¥–∏—Ç—å –≤ –º–∞–≥–∞–∑–∏–Ω'\n"
            "- '–ß–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç –ø–æ–º—ã—Ç—å –ø–æ—Å—É–¥—É'\n"
            "- '/new 2025-10-07 10:00 –∫—É–ø–∏—Ç—å —Ö–ª–µ–±'"
        )
        return

    # —É–¥–∞–ª–∏–º –º–∞—Ç—á–µ–Ω–Ω—É—é —Ñ—Ä–∞–∑—É –∏–∑ —Ç–µ–∫—Å—Ç–∞ (–æ–¥–∏–Ω —Ä–∞–∑, –±–µ–∑ —É—á—ë—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞)
    try:
        pattern = re.escape(match_text)
        reminder_text = re.sub(pattern, "", original, count=1, flags=re.I).strip()
    except Exception:
        reminder_text = original

    # —É–±–∏—Ä–∞–µ–º –≤–µ–¥—É—â–∏–µ —Å–ª–æ–≤–∞ "–Ω–∞–ø–æ–º–Ω–∏"
    reminder_text = re.sub(r'^\s*(?:–Ω–∞–ø–æ–º–Ω–∏|–ø–æ–∂–∞–ª—É–π—Å—Ç–∞|–ø–æ–º–æ–≥–∏|–Ω–∞–ø–∏—à–∏)\b[:,]?\s*', '', reminder_text, flags=re.I).strip()

    if not reminder_text:
        reminder_text = "–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ"

    # –ü—Ä–∏–≤–µ–¥—ë–º dt –∫ aware (–µ—Å–ª–∏ –≤–¥—Ä—É–≥) –∏ –∫ UTC –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è
    if dt.tzinfo is None:
        dt = dt.replace(tzinfo=TIMEZONE)
    dt_utc = dt.astimezone(ZoneInfo("UTC"))
    iso_utc = dt_utc.isoformat()

    rid = add_reminder_db(user_id, chat_id, reminder_text, iso_utc)

    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –≤ Asia/Almaty
    dt_local = dt_utc.astimezone(TIMEZONE)
    await update.message.reply_text(
        f"‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ #{rid} —Å–æ–∑–¥–∞–Ω–æ:\n"
        f"üìå –ß—Ç–æ: {reminder_text}\n"
        f"üïí –ö–æ–≥–¥–∞: {dt_local.strftime('%Y-%m-%d %H:%M %Z')}"
    )
    logger.info(f"–°–æ–∑–¥–∞–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ #{rid} –¥–ª—è {chat_id}: {reminder_text} at {iso_utc}")

async def list_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    rows = list_reminders_db(chat_id)
    if not rows:
        await update.message.reply_text("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π.")
        return
    lines = []
    for rid, text, remind_iso in rows:
        try:
            dt_utc = datetime.fromisoformat(remind_iso)
            dt_local = dt_utc.astimezone(TIMEZONE)
            lines.append(f"#{rid} ‚Äî {dt_local.strftime('%Y-%m-%d %H:%M')} ‚Äî {text}")
        except Exception:
            lines.append(f"#{rid} ‚Äî {remind_iso} ‚Äî {text}")
    await update.message.reply_text("–°–ø–∏—Å–æ–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π:\n" + "\n".join(lines))

async def cancel_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    args = (context.args or [])
    if not args:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /cancel <id>")
        return
    try:
        rid = int(args[0])
    except ValueError:
        await update.message.reply_text("id –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
        return
    ok = cancel_reminder_db(chat_id, rid)
    if ok:
        await update.message.reply_text(f"‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ #{rid} –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    else:
        await update.message.reply_text(f"‚ùå –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ #{rid} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")

# ========== Periodic checker (job_queue) ==========
async def check_due_reminders(context: ContextTypes.DEFAULT_TYPE):
    now_utc = datetime.utcnow().replace(tzinfo=ZoneInfo("UTC"))
    now_iso = now_utc.isoformat()
    due = get_due_reminders_db(now_iso)
    for rid, chat_id, text, remind_iso in due:
        try:
            await context.bot.send_message(chat_id=chat_id, text=f"üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {text}")
            mark_sent_db(rid)
            logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ #{rid} to {chat_id}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è #{rid}: {e}")

# ========== MAIN ==========
def main():
    init_db()

    app = Application.builder().token(BOT_TOKEN).build()

    # –•—ç–Ω–¥–ª–µ—Ä—ã
    app.add_handler(CommandHandler("start", start_handler))
    app.add_handler(CommandHandler("new", new_handler))
    app.add_handler(CommandHandler("list", list_handler))
    app.add_handler(CommandHandler("cancel", cancel_handler))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    # job_queue ‚Äî –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
    app.job_queue.run_repeating(check_due_reminders, interval=60, first=10)

    logger.info("üöÄ –ó–∞–ø—É—Å–∫ webhook...")
    app.run_webhook(
        listen="0.0.0.0",
        port=PORT,
        url_path="webhook",
        webhook_url=WEBHOOK_URL
    )

if __name__ == "__main__":
    main()
