import logging
import sqlite3
import os
from datetime import datetime, timedelta
from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    ContextTypes,
    ConversationHandler,
    MessageHandler,
    filters,
    JobQueue,
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è ConversationHandler
SET_REMINDER, SET_TIME = range(2)


class ReminderBot:
    def __init__(self, token: str):
        self.token = token
        self.application = ApplicationBuilder().token(token).build()
        self.init_db()
        self.setup_handlers()

    def init_db(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        conn = sqlite3.connect("reminders.db", check_same_thread=False)
        cursor = conn.cursor()

        cursor.execute("""
            CREATE TABLE IF NOT EXISTS reminders (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER,
                chat_id INTEGER,
                text TEXT,
                time TEXT,
                created TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                status TEXT DEFAULT 'active'
            )
        """)

        conn.commit()
        conn.close()
        logger.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")

    def save_reminder(self, user_id: int, chat_id: int, text: str, time: str):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ –ë–î"""
        conn = sqlite3.connect("reminders.db", check_same_thread=False)
        cursor = conn.cursor()
        cursor.execute(
            "INSERT INTO reminders (user_id, chat_id, text, time) VALUES (?, ?, ?, ?)",
            (user_id, chat_id, text, time)
        )
        reminder_id = cursor.lastrowid
        conn.commit()
        conn.close()
        logger.info(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ {reminder_id} –¥–ª—è user {user_id}: {text} –≤ {time}")
        return reminder_id

    def get_user_reminders(self, user_id: int):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        conn = sqlite3.connect("reminders.db", check_same_thread=False)
        cursor = conn.cursor()
        cursor.execute(
            "SELECT id, text, time, status FROM reminders WHERE user_id = ? AND status = 'active' ORDER BY time",
            (user_id,)
        )
        reminders = cursor.fetchall()
        conn.close()
        return reminders

    def get_pending_reminders(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –≥–æ—Ç–æ–≤—ã—Ö –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ"""
        now = datetime.now().strftime("%Y-%m-%d %H:%M")
        conn = sqlite3.connect("reminders.db", check_same_thread=False)
        cursor = conn.cursor()
        cursor.execute(
            "SELECT id, chat_id, text FROM reminders WHERE time <= ? AND status = 'active'",
            (now,)
        )
        reminders = cursor.fetchall()
        conn.close()
        return reminders

    def mark_reminder_sent(self, reminder_id: int):
        """–ü–æ–º–µ—Ç–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∫–∞–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ"""
        conn = sqlite3.connect("reminders.db", check_same_thread=False)
        cursor = conn.cursor()
        cursor.execute(
            "UPDATE reminders SET status = 'sent' WHERE id = ?",
            (reminder_id,)
        )
        conn.commit()
        conn.close()
        logger.info(f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ {reminder_id} –ø–æ–º–µ—á–µ–Ω–æ –∫–∞–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ")

    def setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥"""
        self.application.add_handler(CommandHandler("start", self.start))
        self.application.add_handler(CommandHandler("my_reminders", self.show_reminders))
        self.application.add_handler(CommandHandler("help", self.help_command))
        self.application.add_handler(CommandHandler("debug", self.debug_info))
        self.application.add_handler(CommandHandler("test", self.test_reminder))

        conv_handler = ConversationHandler(
            entry_points=[
                CommandHandler("new", self.set_reminder),
                MessageHandler(filters.Regex("^üìù –°–æ–∑–¥–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ$"), self.set_reminder)
            ],
            states={
                SET_REMINDER: [MessageHandler(filters.TEXT & ~filters.COMMAND, self.set_time)],
                SET_TIME: [MessageHandler(filters.TEXT & ~filters.COMMAND, self.save_reminder_handler)]
            },
            fallbacks=[CommandHandler("cancel", self.cancel)]
        )
        self.application.add_handler(conv_handler)

        self.application.add_handler(
            MessageHandler(filters.Regex("^üìã –ú–æ–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è$"), self.show_reminders)
        )

        self.application.add_handler(CommandHandler("delete", self.delete_reminder_command))

    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        keyboard = [["üìù –°–æ–∑–¥–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ", "üìã –ú–æ–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"]]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

        await update.message.reply_text(
            "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç-–Ω–∞–ø–æ–º–∏–Ω–∞–ª—å—â–∏–∫.\n\n"
            "–°–æ–∑–¥–∞–≤–∞–π—Ç–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è, –∏ —è –ø—Ä–∏—à–ª—é —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è.",
            reply_markup=reply_markup
        )

    async def debug_info(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏"""
        now = datetime.now().strftime("%Y-%m-%d %H:%M")
        conn = sqlite3.connect("reminders.db", check_same_thread=False)
        cursor = conn.cursor()

        cursor.execute("SELECT COUNT(*) FROM reminders")
        total = cursor.fetchone()[0]

        cursor.execute("SELECT COUNT(*) FROM reminders WHERE status = 'active'")
        active = cursor.fetchone()[0]

        cursor.execute("SELECT COUNT(*) FROM reminders WHERE status = 'sent'")
        sent = cursor.fetchone()[0]

        cursor.execute("SELECT id, text, time FROM reminders WHERE status = 'active' ORDER BY time LIMIT 5")
        next_reminders = cursor.fetchall()

        conn.close()

        debug_text = f"""
üîß **–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏:**

‚è∞ –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: `{now}`
üìä –í—Å–µ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π: `{total}`
üü¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö: `{active}`
‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö: `{sent}`

**–ë–ª–∏–∂–∞–π—à–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:**
"""
        for i, (rem_id, text, time) in enumerate(next_reminders, 1):
            debug_text += f"{i}. ID:{rem_id} `{time}` - {text}\n"

        await update.message.reply_text(debug_text, parse_mode='Markdown')

    async def test_reminder(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–¢–µ—Å—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ - —Å–æ–∑–¥–∞–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–∞ 1 –º–∏–Ω—É—Ç—É –≤–ø–µ—Ä–µ–¥"""
        test_time = (datetime.now() + timedelta(minutes=1)).strftime("%Y-%m-%d %H:%M")
        reminder_id = self.save_reminder(
            update.effective_user.id,
            update.effective_chat.id,
            "–¢–ï–°–¢–û–í–û–ï –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ",
            test_time
        )

        await update.message.reply_text(
            f"üß™ –°–æ–∑–¥–∞–Ω–æ —Ç–µ—Å—Ç–æ–≤–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ!\n"
            f"ID: {reminder_id}\n"
            f"–í—Ä–µ–º—è: {test_time}\n\n"
            f"–ñ–¥–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 1 –º–∏–Ω—É—Ç—É!"
        )

    async def set_reminder(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        await update.message.reply_text(
            "üìù –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:",
            reply_markup=ReplyKeyboardRemove()
        )
        return SET_REMINDER

    async def set_time(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        context.user_data["reminder_text"] = update.message.text
        await update.message.reply_text(
            "‚è∞ –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
            "‚Ä¢ –ì–ì–ì–ì-–ú–ú-–î–î –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä: 2024-12-31 23:59)\n"
            "‚Ä¢ –ò–ª–∏ —á–µ—Ä–µ–∑ —Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä: 30)\n\n"
            "–ü—Ä–∏–º–µ—Ä—ã:\n"
            "‚Ä¢ 2024-12-31 23:59\n"
            "‚Ä¢ 30 (—á–µ—Ä–µ–∑ 30 –º–∏–Ω—É—Ç)"
        )
        return SET_TIME

    async def save_reminder_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        time_input = update.message.text.strip()
        reminder_text = context.user_data["reminder_text"]

        try:
            if time_input.isdigit():
                minutes = int(time_input)
                reminder_time = (datetime.now() + timedelta(minutes=minutes)).strftime("%Y-%m-%d %H:%M")
                time_display = f"—á–µ—Ä–µ–∑ {minutes} –º–∏–Ω—É—Ç"
            else:
                reminder_time_obj = datetime.strptime(time_input, "%Y-%m-%d %H:%M")
                if reminder_time_obj <= datetime.now():
                    await update.message.reply_text("‚ùå –í—Ä–µ–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ –±—É–¥—É—â–µ–º!")
                    return SET_TIME
                reminder_time = time_input
                time_display = reminder_time

            reminder_id = self.save_reminder(
                update.effective_user.id,
                update.effective_chat.id,
                reminder_text,
                reminder_time
            )

            keyboard = [["üìù –°–æ–∑–¥–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ", "üìã –ú–æ–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"]]
            reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

            await update.message.reply_text(
                f"‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ! (ID: {reminder_id})\n\n"
                f"üìù –¢–µ–∫—Å—Ç: {reminder_text}\n"
                f"‚è∞ –í—Ä–µ–º—è: {time_display}",
                reply_markup=reply_markup
            )
            return ConversationHandler.END

        except ValueError:
            await update.message.reply_text(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏!\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n"
                "‚Ä¢ –ì–ì–ì–ì-–ú–ú-–î–î –ß–ß:–ú–ú\n"
                "‚Ä¢ –ò–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∏–Ω—É—Ç"
            )
            return SET_TIME

    async def show_reminders(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        reminders = self.get_user_reminders(update.effective_user.id)

        if not reminders:
            await update.message.reply_text("üì≠ –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π")
            return

        text = "üìã –í–∞—à–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:\n\n"
        for reminder_id, reminder_text, reminder_time, status in reminders:
            status_icon = "‚è≥"
            text += f"{status_icon} ID:{reminder_id}\n   üìù {reminder_text}\n   ‚è∞ {reminder_time}\n\n"

        text += "–î–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /delete ID"
        await update.message.reply_text(text)

    async def delete_reminder_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        if not context.args:
            await update.message.reply_text("‚ùå –£–∫–∞–∂–∏—Ç–µ ID –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è\n–ü—Ä–∏–º–µ—Ä: /delete 1")
            return

        try:
            reminder_id = int(context.args[0])
            conn = sqlite3.connect("reminders.db", check_same_thread=False)
            cursor = conn.cursor()
            cursor.execute(
                "DELETE FROM reminders WHERE id = ? AND user_id = ?",
                (reminder_id, update.effective_user.id)
            )
            deleted = cursor.rowcount > 0
            conn.commit()
            conn.close()

            if deleted:
                await update.message.reply_text(f"‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ #{reminder_id} —É–¥–∞–ª–µ–Ω–æ")
            else:
                await update.message.reply_text("‚ùå –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        except ValueError:
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è")

    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        help_text = """
ü§ñ **–ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞:**
/new - —Å–æ–∑–¥–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
/my_reminders - –º–æ–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è  
/delete [ID] - —É–¥–∞–ª–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
/debug - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
/test - —Å–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ (—á–µ—Ä–µ–∑ 1 –º–∏–Ω—É—Ç—É)
/help - –ø–æ–º–æ—â—å
        """
        await update.message.reply_text(help_text)

    async def cancel(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        keyboard = [["üìù –°–æ–∑–¥–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ", "üìã –ú–æ–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"]]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        await update.message.reply_text("‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=reply_markup)
        return ConversationHandler.END

    async def check_reminders_job(self, context: ContextTypes.DEFAULT_TYPE):
        """–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"""
        try:
            now = datetime.now().strftime("%Y-%m-%d %H:%M")
            logger.info(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –≤ {now}")

            reminders = self.get_pending_reminders()
            logger.info(f"üì§ –ù–∞–π–¥–µ–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏: {len(reminders)}")

            for reminder_id, chat_id, text in reminders:
                logger.info(f"  –û—Ç–ø—Ä–∞–≤–ª—è—é –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ {reminder_id} –≤ —á–∞—Ç {chat_id}")

                try:
                    await context.bot.send_message(
                        chat_id=chat_id,
                        text=f"üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {text}"
                    )
                    self.mark_reminder_sent(reminder_id)
                    logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ {reminder_id}")

                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è {reminder_id}: {e}")

        except Exception as e:
            logger.error(f"üî• –û—à–∏–±–∫–∞ –≤ check_reminders_job: {e}")

    def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫—É—é –∑–∞–¥–∞—á—É –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
        job_queue = self.application.job_queue
        job_queue.run_repeating(self.check_reminders_job, interval=30, first=10)

        logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω —Å JobQueue...")
        self.application.run_polling()


def main():
    BOT_TOKEN = "7309853259:AAEgnNjHnRLBWMt-0K6VRkJTXIczj2HvPd0"

    bot = ReminderBot(BOT_TOKEN)
    bot.run()


if __name__ == "__main__":
    main()
