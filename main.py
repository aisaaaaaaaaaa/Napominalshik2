import os
import logging
import asyncio
from datetime import datetime

import dateparser
from apscheduler.schedulers.background import BackgroundScheduler
from apscheduler.triggers.interval import IntervalTrigger

from telegram import Update
from telegram.ext import (
    Application, CommandHandler, ContextTypes, MessageHandler, filters
)

# ==============================
# –õ–û–ì–ò
# ==============================
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# ==============================
# –•–†–ê–ù–ò–õ–ò–©–ï –ù–ê–ü–û–ú–ò–ù–ê–ù–ò–ô (–≤ –ø–∞–º—è—Ç–∏)
# ==============================
reminders = {}  # {chat_id: [(time, text)]}


# ==============================
# –ö–û–ú–ê–ù–î–´
# ==============================
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç-–Ω–∞–ø–æ–º–∏–Ω–∞–ª—å—â–∏–∫.\n"
        "–ù–∞–ø–∏—à–∏ —á—Ç–æ-—Ç–æ –≤—Ä–æ–¥–µ:\n\n"
        "üëâ –Ω–∞–ø–æ–º–Ω–∏ –∑–∞–≤—Ç—Ä–∞ –≤ 10:00 —Å—Ö–æ–¥–∏—Ç—å –≤ –º–∞–≥–∞–∑–∏–Ω\n"
        "üëâ –Ω–∞–ø–æ–º–Ω–∏ —á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —á–∞–π–Ω–∏–∫"
    )


async def new(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‚úç –í–≤–µ–¥–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –Ω–∞–ø–æ–º–Ω–∏ [–≤—Ä–µ–º—è] [—Ç–µ–∫—Å—Ç]")


# ==============================
# –î–û–ë–ê–í–õ–ï–ù–ò–ï –ù–ê–ü–û–ú–ò–ù–ê–ù–ò–Ø
# ==============================
async def add_reminder(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.message.chat_id
    text = update.message.text.lower()

    if not text.startswith("–Ω–∞–ø–æ–º–Ω–∏"):
        return

    # —É–±–∏—Ä–∞–µ–º —Å–ª–æ–≤–æ "–Ω–∞–ø–æ–º–Ω–∏"
    reminder_text = text.replace("–Ω–∞–ø–æ–º–Ω–∏", "", 1).strip()

    # –ø–∞—Ä—Å–∏–º –≤—Ä–µ–º—è
    reminder_time = dateparser.parse(reminder_text, languages=["ru"], settings={"PREFER_DATES_FROM": "future"})

    if not reminder_time:
        await update.message.reply_text("‚ö† –ù–µ –ø–æ–Ω—è–ª –≤—Ä–µ–º—è. –ü–æ–ø—Ä–æ–±—É–π —Ç–∞–∫: '–Ω–∞–ø–æ–º–Ω–∏ –∑–∞–≤—Ç—Ä–∞ –≤ 10:00 –∫—É–ø–∏—Ç—å —Ö–ª–µ–±'.")
        return

    # —É–±–∏—Ä–∞–µ–º –≤—Ä–µ–º—è –∏–∑ —Ç–µ–∫—Å—Ç–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
    clean_text = reminder_text.replace(str(reminder_time.date()), "").strip()

    reminders.setdefault(chat_id, []).append((reminder_time, clean_text))

    await update.message.reply_text(
        f"‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ!\n"
        f"üïí –ö–æ–≥–¥–∞: {reminder_time.strftime('%Y-%m-%d %H:%M')}\n"
        f"üìå –ß—Ç–æ: {clean_text}"
    )
    logger.info(f"–°–æ–∑–¥–∞–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–ª—è {chat_id}: {reminder_time} -> {clean_text}")


# ==============================
# –ü–†–û–í–ï–†–ö–ê –ù–ê–ü–û–ú–ò–ù–ê–ù–ò–ô
# ==============================
async def check_reminders_job(application: Application):
    now = datetime.now()
    for chat_id, user_reminders in list(reminders.items()):
        for reminder_time, text in user_reminders[:]:
            if reminder_time <= now:
                try:
                    await application.bot.send_message(chat_id=chat_id, text=f"‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {text}")
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {e}")
                user_reminders.remove((reminder_time, text))


# ==============================
# –ó–ê–ü–£–°–ö –ü–õ–ê–ù–ò–†–û–í–©–ò–ö–ê
# ==============================
def start_scheduler(application: Application):
    scheduler = BackgroundScheduler()

    # —Ç–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ–º application.create_task –≤–º–µ—Å—Ç–æ asyncio.create_task
    def job():
        application.create_task(check_reminders_job(application))

    scheduler.add_job(job, trigger=IntervalTrigger(minutes=1))
    scheduler.start()
    logger.info("üïí –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–ø—É—â–µ–Ω")


# ==============================
# MAIN
# ==============================
def main():
    TOKEN = os.getenv("BOT_TOKEN", "YOUR_BOT_TOKEN")
    WEBHOOK_URL = os.getenv("WEBHOOK_URL", "https://napominalshik2.onrender.com/webhook")
    PORT = int(os.getenv("PORT", 10000))

    application = Application.builder().token(TOKEN).build()

    # –∫–æ–º–∞–Ω–¥—ã
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("new", new))

    # –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, add_reminder))

    # –∑–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
    start_scheduler(application)

    # –∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ webhook (Render)
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ Webhook...")
    application.run_webhook(
        listen="0.0.0.0",
        port=PORT,
        url_path="/webhook",
        webhook_url=WEBHOOK_URL
    )


if __name__ == "__main__":
    main()
