import logging
import sqlite3
import os
from datetime import datetime, timedelta
from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    ConversationHandler,
    filters,
)

# === –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ===
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# === –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã ===
SET_TEXT, SET_TIME = range(2)

BOT_TOKEN = os.getenv("BOT_TOKEN")
WEBHOOK_URL = os.getenv("WEBHOOK_URL")
PORT = int(os.getenv("PORT", "10000"))

if not BOT_TOKEN or not WEBHOOK_URL:
    raise ValueError("‚ùå –£–∫–∞–∂–∏ BOT_TOKEN –∏ WEBHOOK_URL –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")

# === –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö ===
def init_db():
    conn = sqlite3.connect("reminders.db", check_same_thread=False)
    cursor = conn.cursor()
    cursor.execute("""
        CREATE TABLE IF NOT EXISTS reminders (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER,
            chat_id INTEGER,
            text TEXT,
            time TEXT,
            status TEXT DEFAULT 'active'
        )
    """)
    conn.commit()
    conn.close()

def save_reminder(user_id, chat_id, text, time):
    conn = sqlite3.connect("reminders.db", check_same_thread=False)
    cursor = conn.cursor()
    cursor.execute(
        "INSERT INTO reminders (user_id, chat_id, text, time) VALUES (?, ?, ?, ?)",
        (user_id, chat_id, text, time)
    )
    rid = cursor.lastrowid
    conn.commit()
    conn.close()
    return rid

def get_user_reminders(user_id):
    conn = sqlite3.connect("reminders.db", check_same_thread=False)
    cursor = conn.cursor()
    cursor.execute(
        "SELECT id, text, time, status FROM reminders WHERE user_id=? ORDER BY time ASC",
        (user_id,)
    )
    res = cursor.fetchall()
    conn.close()
    return res

def delete_reminder(rid, user_id):
    conn = sqlite3.connect("reminders.db", check_same_thread=False)
    cursor = conn.cursor()
    cursor.execute("DELETE FROM reminders WHERE id=? AND user_id=?", (rid, user_id))
    changes = conn.total_changes
    conn.commit()
    conn.close()
    return changes > 0

def get_pending_reminders():
    now = datetime.now().strftime("%Y-%m-%d %H:%M")
    conn = sqlite3.connect("reminders.db", check_same_thread=False)
    cursor = conn.cursor()
    cursor.execute(
        "SELECT id, chat_id, text FROM reminders WHERE time <= ? AND status = 'active'",
        (now,)
    )
    res = cursor.fetchall()
    conn.close()
    return res

def mark_reminder_sent(rid):
    conn = sqlite3.connect("reminders.db", check_same_thread=False)
    cursor = conn.cursor()
    cursor.execute("UPDATE reminders SET status='sent' WHERE id=?", (rid,))
    conn.commit()
    conn.close()

# === –ö–æ–º–∞–Ω–¥—ã ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    kb = [["üìù –ù–æ–≤–æ–µ"], ["üìã –ú–æ–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"], ["‚ùå –û—Ç–º–µ–Ω–∞"]]
    await update.message.reply_text(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø ‚Äî —Ç–≤–æ–π –±–æ—Ç-–Ω–∞–ø–æ–º–∏–Ω–∞–ª—å—â–∏–∫.\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π –º–µ–Ω—é –∏–ª–∏ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/new ‚Äî —Å–æ–∑–¥–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ\n"
        "/list ‚Äî —Å–ø–∏—Å–æ–∫\n"
        "/delete ‚Äî —É–¥–∞–ª–∏—Ç—å\n"
        "/help ‚Äî –ø–æ–º–æ—â—å",
        reply_markup=ReplyKeyboardMarkup(kb, resize_keyboard=True)
    )

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üìñ –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/start ‚Äî –∑–∞–ø—É—Å–∫\n"
        "/new ‚Äî —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ\n"
        "/list ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫\n"
        "/delete <id> ‚Äî —É–¥–∞–ª–∏—Ç—å\n"
        "/cancel ‚Äî –æ—Ç–º–µ–Ω–∞\n"
    )

# === –°–æ–∑–¥–∞–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è ===
async def new_reminder(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üìù –í–≤–µ–¥–∏ —Ç–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:", reply_markup=ReplyKeyboardRemove())
    return SET_TEXT

async def set_time(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["text"] = update.message.text
    await update.message.reply_text("‚è∞ –í–≤–µ–¥–∏ –≤—Ä–µ–º—è (–º–∏–Ω—É—Ç—ã –∏–ª–∏ –ì–ì–ì–ì-–ú–ú-–î–î –ß–ß:–ú–ú):")
    return SET_TIME

async def save_reminder_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    chat_id = update.effective_chat.id
    text = context.user_data["text"]
    time_input = update.message.text.strip()

    try:
        if time_input.isdigit():
            minutes = int(time_input)
            time_str = (datetime.now() + timedelta(minutes=minutes)).strftime("%Y-%m-%d %H:%M")
        else:
            time_obj = datetime.strptime(time_input, "%Y-%m-%d %H:%M")
            if time_obj <= datetime.now():
                await update.message.reply_text("‚ùå –í—Ä–µ–º—è –≤ –ø—Ä–æ—à–ª–æ–º!")
                return SET_TIME
            time_str = time_input

        rid = save_reminder(user_id, chat_id, text, time_str)
        await update.message.reply_text(f"‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ #{rid} —Å–æ–∑–¥–∞–Ω–æ –Ω–∞ {time_str}")
        return ConversationHandler.END
    except ValueError:
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏")
        return SET_TIME

# === –°–ø–∏—Å–æ–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π ===
async def list_reminders(update: Update, context: ContextTypes.DEFAULT_TYPE):
    reminders = get_user_reminders(update.effective_user.id)
    if not reminders:
        await update.message.reply_text("üì≠ –£ —Ç–µ–±—è –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π")
        return

    msg = "üìã –¢–≤–æ–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:\n"
    for rid, text, time, status in reminders:
        msg += f"#{rid} ‚Äî {text} ‚è∞ {time} [{status}]\n"
    await update.message.reply_text(msg)

# === –£–¥–∞–ª–µ–Ω–∏–µ ===
async def delete_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.args:
        await update.message.reply_text("‚ùå –ò—Å–ø–æ–ª—å–∑—É–π: /delete <id>")
        return

    rid = context.args[0]
    if rid.isdigit():
        success = delete_reminder(int(rid), update.effective_user.id)
        if success:
            await update.message.reply_text(f"üóë –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ #{rid} —É–¥–∞–ª–µ–Ω–æ")
        else:
            await update.message.reply_text("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ")
    else:
        await update.message.reply_text("‚ùå ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º")

# === –û—Ç–º–µ–Ω–∞ ===
async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üö´ –û—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=ReplyKeyboardRemove())
    return ConversationHandler.END

# === –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π ===
async def check_reminders_job(context: ContextTypes.DEFAULT_TYPE):
    pending = get_pending_reminders()
    for rid, chat_id, text in pending:
        try:
            await context.bot.send_message(chat_id=chat_id, text=f"üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {text}")
            mark_reminder_sent(rid)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ {rid}: {e}")

# === –ó–∞–ø—É—Å–∫ ===
if __name__ == "__main__":
    init_db()
    app = Application.builder().token(BOT_TOKEN).build()

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help_command))
    app.add_handler(CommandHandler("list", list_reminders))
    app.add_handler(CommandHandler("delete", delete_command))

    conv = ConversationHandler(
        entry_points=[CommandHandler("new", new_reminder)],
        states={
            SET_TEXT: [MessageHandler(filters.TEXT & ~filters.COMMAND, set_time)],
            SET_TIME: [MessageHandler(filters.TEXT & ~filters.COMMAND, save_reminder_handler)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )
    app.add_handler(conv)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
    app.job_queue.run_repeating(check_reminders_job, interval=60, first=10)

    logger.info("üöÄ –ó–∞–ø—É—Å–∫ webhook...")
    app.run_webhook(
        listen="0.0.0.0",
        port=PORT,
        webhook_url=WEBHOOK_URL,
    )
