import logging
import os
import pytz
import sqlite3
from datetime import datetime

import dateparser
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from telegram import Update
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    filters,
)

# ----------------- –õ–û–ì–ò -----------------
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# ----------------- –ù–ê–°–¢–†–û–ô–ö–ò -----------------
TOKEN = os.getenv("BOT_TOKEN", "YOUR_BOT_TOKEN")
WEBHOOK_URL = os.getenv("WEBHOOK_URL", "https://napominalshik2.onrender.com/webhook")
PORT = int(os.getenv("PORT", 10000))

# –¢–∞–π–º–∑–æ–Ω–∞
TIMEZONE = pytz.timezone("Asia/Almaty")

# ----------------- –ë–î -----------------
def init_db():
    conn = sqlite3.connect("reminders.db")
    c = conn.cursor()
    c.execute("""CREATE TABLE IF NOT EXISTS reminders (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    chat_id INTEGER,
                    text TEXT,
                    remind_time TEXT
                )""")
    conn.commit()
    conn.close()

def save_reminder(chat_id: int, text: str, remind_time: str):
    conn = sqlite3.connect("reminders.db")
    c = conn.cursor()
    c.execute("INSERT INTO reminders (chat_id, text, remind_time) VALUES (?, ?, ?)",
              (chat_id, text, remind_time))
    conn.commit()
    conn.close()

def get_due_reminders():
    conn = sqlite3.connect("reminders.db")
    c = conn.cursor()
    now = datetime.now(TIMEZONE).strftime("%Y-%m-%d %H:%M")
    c.execute("SELECT id, chat_id, text FROM reminders WHERE remind_time <= ?", (now,))
    reminders = c.fetchall()
    for r in reminders:
        c.execute("DELETE FROM reminders WHERE id=?", (r[0],))
    conn.commit()
    conn.close()
    return reminders

# ----------------- APSCHEDULER -----------------
scheduler = AsyncIOScheduler(timezone=TIMEZONE)

async def send_reminder(chat_id: int, text: str, context: ContextTypes.DEFAULT_TYPE):
    try:
        await context.bot.send_message(chat_id=chat_id, text=f"üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {text}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {e}")

async def check_reminders_job(context: ContextTypes.DEFAULT_TYPE):
    reminders = get_due_reminders()
    for _, chat_id, text in reminders:
        await send_reminder(chat_id, text, context)

# ----------------- –ö–û–ú–ê–ù–î–´ -----------------
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç üëã –Ø –±–æ—Ç-–Ω–∞–ø–æ–º–∏–Ω–∞–ª—å—â–∏–∫!\n"
        "–ü—Ä–∏–º–µ—Ä—ã:\n"
        "‚Ä¢ –Ω–∞–ø–æ–º–Ω–∏ –∑–∞–≤—Ç—Ä–∞ –≤ 10:00 —Å—Ö–æ–¥–∏—Ç—å –≤ –º–∞–≥–∞–∑–∏–Ω\n"
        "‚Ä¢ —á–µ—Ä–µ–∑ 15 –º–∏–Ω—É—Ç –ø–æ–ª–∏—Ç—å —Ü–≤–µ—Ç—ã\n"
        "‚Ä¢ –∑–∞–≤—Ç—Ä–∞ –≤ 18:30 –≤—Å—Ç—Ä–µ—á–∞\n"
        "‚Ä¢ —á–µ—Ä–µ–∑ —á–∞—Å –ø–æ–∑–≤–æ–Ω–∏—Ç—å –º–∞–º–µ"
    )

async def add_reminder_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∞—è –∫–æ–º–∞–Ω–¥–∞ /remind"""
    try:
        dt_str = context.args[0] + " " + context.args[1]
        text = " ".join(context.args[2:])
        remind_time = datetime.strptime(dt_str, "%Y-%m-%d %H:%M")
        remind_time = TIMEZONE.localize(remind_time)

        save_reminder(update.effective_chat.id, text, remind_time.strftime("%Y-%m-%d %H:%M"))

        await update.message.reply_text(f"‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {text} –≤ {remind_time}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {e}")
        await update.message.reply_text("‚ùå –ò—Å–ø–æ–ª—å–∑—É–π —Ñ–æ—Ä–º–∞—Ç: /remind YYYY-MM-DD HH:MM –¢–ï–ö–°–¢")

async def parse_reminder(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–∞—Ä—Å–∏–º –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_text = update.message.text.strip()

    # –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –¥–∞—Ç—É/–≤—Ä–µ–º—è –≤ —Ç–µ–∫—Å—Ç–µ
    dt = dateparser.parse(user_text, languages=["ru"], settings={"TIMEZONE": "Asia/Almaty", "RETURN_AS_TIMEZONE_AWARE": True})

    if not dt:
        await update.message.reply_text("‚ùå –ù–µ –ø–æ–Ω—è–ª –≤—Ä–µ–º—è. –ü–æ–ø—Ä–æ–±—É–π –Ω–∞–ø–∏—Å–∞—Ç—å –ø–æ-–¥—Ä—É–≥–æ–º—É (–Ω–∞–ø—Ä–∏–º–µ—Ä: –∑–∞–≤—Ç—Ä–∞ –≤ 10:00 –∏–ª–∏ —á–µ—Ä–µ–∑ 15 –º–∏–Ω—É—Ç).")
        return

    # –¢–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è = –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç –±–µ–∑ –¥–∞—Ç—ã
    text = user_text

    save_reminder(update.effective_chat.id, text, dt.strftime("%Y-%m-%d %H:%M"))
    await update.message.reply_text(f"‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {text} –≤ {dt.strftime('%Y-%m-%d %H:%M')}")

# ----------------- MAIN -----------------
def main():
    init_db()

    application = Application.builder().token(TOKEN).build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("remind", add_reminder_cmd))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, parse_reminder))

    scheduler.add_job(
        lambda: check_reminders_job(application.bot),
        trigger="interval",
        minutes=1
    )
    scheduler.start()

    logger.info("üöÄ –ó–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ Webhook...")
    application.run_webhook(
        listen="0.0.0.0",
        port=PORT,
        url_path="/webhook",
        webhook_url=WEBHOOK_URL
    )

if __name__ == "__main__":
    main()
