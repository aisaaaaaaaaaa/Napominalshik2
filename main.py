import logging
import sqlite3
import os
from datetime import datetime, timedelta
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    ContextTypes,
    ConversationHandler,
    MessageHandler,
    filters,
)

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è
SET_REMINDER, SET_TIME = range(2)

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
BOT_TOKEN = os.getenv("BOT_TOKEN")
WEBHOOK_URL = os.getenv("WEBHOOK_URL")
PORT = int(os.getenv("PORT", "10000"))

if not BOT_TOKEN:
    raise ValueError("‚ùå BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
if not WEBHOOK_URL:
    raise ValueError("‚ùå WEBHOOK_URL –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

# === –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö ===
def init_db():
    conn = sqlite3.connect("reminders.db", check_same_thread=False)
    cursor = conn.cursor()
    cursor.execute("""
        CREATE TABLE IF NOT EXISTS reminders (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER,
            chat_id INTEGER,
            text TEXT,
            time TEXT,
            created TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            status TEXT DEFAULT 'active'
        )
    """)
    conn.commit()
    conn.close()
    logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")

def save_reminder(user_id: int, chat_id: int, text: str, time: str):
    conn = sqlite3.connect("reminders.db", check_same_thread=False)
    cursor = conn.cursor()
    cursor.execute(
        "INSERT INTO reminders (user_id, chat_id, text, time) VALUES (?, ?, ?, ?)",
        (user_id, chat_id, text, time)
    )
    rid = cursor.lastrowid
    conn.commit()
    conn.close()
    logger.info(f"üíæ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ {rid} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ")
    return rid

def get_user_reminders(user_id: int):
    conn = sqlite3.connect("reminders.db", check_same_thread=False)
    cursor = conn.cursor()
    cursor.execute(
        "SELECT id, text, time, status FROM reminders WHERE user_id = ? AND status = 'active' ORDER BY time",
        (user_id,)
    )
    res = cursor.fetchall()
    conn.close()
    return res

def get_pending_reminders():
    now = datetime.now().strftime("%Y-%m-%d %H:%M")
    conn = sqlite3.connect("reminders.db", check_same_thread=False)
    cursor = conn.cursor()
    cursor.execute(
        "SELECT id, chat_id, text FROM reminders WHERE time <= ? AND status = 'active'",
        (now,)
    )
    res = cursor.fetchall()
    conn.close()
    return res

def mark_reminder_sent(rid: int):
    conn = sqlite3.connect("reminders.db", check_same_thread=False)
    cursor = conn.cursor()
    cursor.execute("UPDATE reminders SET status = 'sent' WHERE id = ?", (rid,))
    conn.commit()
    conn.close()
    logger.info(f"‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ {rid} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")

# === –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.info(f"üì© /start –æ—Ç {update.effective_user.id}")
    kb = [["üìù –°–æ–∑–¥–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ", "üìã –ú–æ–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"]]
    await update.message.reply_text(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç-–Ω–∞–ø–æ–º–∏–Ω–∞–ª—å—â–∏–∫.",
        reply_markup=ReplyKeyboardMarkup(kb, resize_keyboard=True)
    )

async def set_reminder(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üìù –¢–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:", reply_markup=ReplyKeyboardRemove())
    return SET_REMINDER

async def set_time(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["text"] = update.message.text
    await update.message.reply_text("‚è∞ –í—Ä–µ–º—è (–ì–ì–ì–ì-–ú–ú-–î–î –ß–ß:–ú–ú –∏–ª–∏ –º–∏–Ω—É—Ç—ã):")
    return SET_TIME

async def save_reminder_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    time_input = update.message.text.strip()
    text = context.user_data["text"]
    try:
        if time_input.isdigit():
            minutes = int(time_input)
            time_str = (datetime.now() + timedelta(minutes=minutes)).strftime("%Y-%m-%d %H:%M")
            display = f"—á–µ—Ä–µ–∑ {minutes} –º–∏–Ω"
        else:
            time_obj = datetime.strptime(time_input, "%Y-%m-%d %H:%M")
            if time_obj <= datetime.now():
                await update.message.reply_text("‚ùå –í—Ä–µ–º—è –≤ –ø—Ä–æ—à–ª–æ–º!")
                return SET_TIME
            time_str = time_input
            display = time_str

        rid = save_reminder(update.effective_user.id, update.effective_chat.id, text, time_str)
        kb = [["üìù –°–æ–∑–¥–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ", "üìã –ú–æ–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"]]
        await update.message.reply_text(
            f"‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ #{rid}\nüìù {text}\n‚è∞ {display}",
            reply_markup=ReplyKeyboardMarkup(kb, resize_keyboard=True)
        )
        return ConversationHandler.END

    except ValueError:
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏")
        return SET_TIME

async def show_reminders(update: Update, context: ContextTypes.DEFAULT_TYPE):
    rem = get_user_reminders(update.effective_user.id)
    if not rem:
        await update.message.reply_text("üì≠ –ù–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π")
        return
    msg = "üìã –í–∞—à–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:\n\n"
    for rid, text, time, _ in rem:
        msg += f"‚è≥ ID:{rid}\n   üìù {text}\n   ‚è∞ {time}\n\n"
    msg += "–£–¥–∞–ª–∏—Ç—å: /delete ID"
    await update.message.reply_text(msg)

async def delete_reminder_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.args:
        await update.message.reply_text("‚ùå /delete <ID>")
        return
    try:
        rid = int(context.args[0])
        conn = sqlite3.connect("reminders.db", check_same_thread=False)
        c = conn.cursor()
        c.execute("DELETE FROM reminders WHERE id = ? AND user_id = ?", (rid, update.effective_user.id))
        ok = c.rowcount > 0
        conn.commit()
        conn.close()
        await update.message.reply_text("‚úÖ –£–¥–∞–ª–µ–Ω–æ" if ok else "‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ")
    except ValueError:
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID")

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ö–æ–º–∞–Ω–¥—ã: /new, /my_reminders, /delete <ID>")

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    kb = [["üìù –°–æ–∑–¥–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ", "üìã –ú–æ–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"]]
    await update.message.reply_text("‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=ReplyKeyboardMarkup(kb, resize_keyboard=True))
    return ConversationHandler.END

async def check_reminders(context: ContextTypes.DEFAULT_TYPE):
    """–í—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é —á–µ—Ä–µ–∑ /check (–≤—Ä—É—á–Ω—É—é)"""
    pending = get_pending_reminders()
    logger.info(f"üîç –ù–∞–π–¥–µ–Ω–æ {len(pending)} –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π")
    for rid, chat_id, text in pending:
        try:
            await context.bot.send_message(chat_id=chat_id, text=f"üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {text}")
            mark_reminder_sent(rid)
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ {rid}: {e}")

# === Webhook —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è /check ===
from aiohttp import web

async def handle_check(request):
    """–≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è cron-job.org"""
    try:
        # –ò–º–∏—Ç–∏—Ä—É–µ–º –≤—ã–∑–æ–≤ JobQueue
        from telegram.ext import ContextTypes
        from types import SimpleNamespace
        fake_update = SimpleNamespace()
        fake_context = ContextTypes.DEFAULT_TYPE(bot=application.bot)
        await check_reminders(fake_context)
        return web.json_response({"status": "ok", "sent": "checked"})
    except Exception as e:
        logger.error(f"üî• –û—à–∏–±–∫–∞ –≤ /check: {e}")
        return web.json_response({"status": "error", "msg": str(e)}, status=500)

# === –ó–∞–ø—É—Å–∫ ===
if __name__ == "__main__":
    init_db()
    application = Application.builder().token(BOT_TOKEN).build()

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("my_reminders", show_reminders))
    application.add_handler(CommandHandler("delete", delete_reminder_command))

    conv = ConversationHandler(
        entry_points=[CommandHandler("new", set_reminder)],
        states={
            SET_REMINDER: [MessageHandler(filters.TEXT & ~filters.COMMAND, set_time)],
            SET_TIME: [MessageHandler(filters.TEXT & ~filters.COMMAND, save_reminder_handler)]
        },
        fallbacks=[CommandHandler("cancel", cancel)]
    )
    application.add_handler(conv)

    # –ó–∞–ø—É—Å–∫ webhook
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ webhook...")
    application.run_webhook(
        listen="0.0.0.0",
        port=PORT,
        url_path=BOT_TOKEN,  # —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –ø—É—Ç—å –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        webhook_url=f"{WEBHOOK_URL}/{BOT_TOKEN}"
    )
