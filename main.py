import os
import logging
from telegram.ext import (
    Application, CommandHandler, MessageHandler, filters, CallbackContext
)
from apscheduler.schedulers.background import BackgroundScheduler
from datetime import datetime
import pytz

# üîπ –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# üîπ –ö–æ–Ω—Ñ–∏–≥
BOT_TOKEN = os.getenv("BOT_TOKEN")
WEBHOOK_URL = os.getenv("WEBHOOK_URL", "https://napominalshik2.onrender.com")
PORT = int(os.getenv("PORT", "8080"))

# üîπ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–∫–∞ –ø—Ä–æ—Å—Ç–∞—è (–≤ –ø–∞–º—è—Ç–∏)
reminders = {}

# --- –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ ---
async def start(update, context: CallbackContext):
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç üëã! –Ø –±–æ—Ç-–Ω–∞–ø–æ–º–∏–Ω–∞–ª—å—â–∏–∫. –ò—Å–ø–æ–ª—å–∑—É–π /new —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ.")

async def new_reminder(update, context: CallbackContext):
    if len(context.args) < 2:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /new <HH:MM> <—Ç–µ–∫—Å—Ç>")
        return
    
    time_str = context.args[0]
    text = " ".join(context.args[1:])
    user_id = update.effective_user.id

    if user_id not in reminders:
        reminders[user_id] = []

    reminders[user_id].append((time_str, text))
    await update.message.reply_text(f"‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ: {time_str} ‚Äî {text}")

async def list_reminders(update, context: CallbackContext):
    user_id = update.effective_user.id
    if user_id not in reminders or not reminders[user_id]:
        await update.message.reply_text("–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π.")
        return

    msg = "‚è∞ –¢–≤–æ–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:\n"
    for t, txt in reminders[user_id]:
        msg += f"‚Ä¢ {t} ‚Äî {txt}\n"
    await update.message.reply_text(msg)

# --- –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ ---
def check_reminders_job(app: Application):
    now = datetime.now(pytz.timezone("Asia/Almaty")).strftime("%H:%M")
    for user_id, user_reminders in reminders.items():
        for t, txt in user_reminders:
            if t == now:
                app.bot.send_message(chat_id=user_id, text=f"üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {txt}")

# --- –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—É—Å–∫ ---
def main():
    app = Application.builder().token(BOT_TOKEN).build()

    # –ö–æ–º–∞–Ω–¥—ã
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("new", new_reminder))
    app.add_handler(CommandHandler("list", list_reminders))

    # –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
    scheduler = BackgroundScheduler(timezone="Asia/Almaty")
    scheduler.add_job(lambda: check_reminders_job(app), "interval", minutes=1)
    scheduler.start()

    # üöÄ –ó–∞–ø—É—Å–∫
    if os.getenv("RENDER") == "true":  
        # –¥–ª—è Render ‚Üí –∑–∞–ø—É—Å–∫–∞–µ–º Webhook
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ Webhook...")
        app.run_webhook(
            listen="0.0.0.0",
            port=PORT,
            webhook_url=f"{WEBHOOK_URL}/{BOT_TOKEN}"
        )
    else:
        # –ª–æ–∫–∞–ª—å–Ω–æ ‚Üí polling
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ Polling...")
        app.run_polling()

if __name__ == "__main__":
    main()
